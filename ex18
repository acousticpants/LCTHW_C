//pointers to functions using a bubble sort function
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>

/* our old friend die from ex17. */
void die(const char *message)
{
    if(errno) {
        perror(message);
    } else {
        printf("ERROR: %s\n", message);
    }
    exit(1);
}
//a typedef creates a fake type, in this
//case for a function pointer is used as type int or char in bubble_sort and 
//test_sorting later on
typedef int (*compare_cb)(int a, int b);
/* A classic bubble sort function using
compare_cb to sort
*
//count and numbers def in main at end of this doc
//cmp compares and reports first character of difference in 2 files
*create variables on stack. array 'target' goes on heap
*/
int *bubble_sort(int *numbers, int count, compare_cb cmp)
{
    int temp = 0;
    int i = 0;
    int j = 0;
    int *target = malloc(count * sizeof(int));

    if(!target) die("Memory error.");

    memcpy(target, numbers, count * sizeof(int));

    for(i = 0; i < count; i++) { //outer loop of sort
        for(j = 0; j < count - 1; j++) { //inner loop of sort
            if(cmp(target[j], target[j+1]) > 0) {
//cmp pointer to compare_cb, can pas variables to it like normal function
//standard comparison sort routine
                temp = target[j+1];
                target[j+1] = target[j];
                target[j] = temp;
            }
        }
    }

    return target;
}
//functions operating on elements a and b based on compare_cb fn type
int sorted_order(int a, int b) {
    return a - b;
    }

int reverse_order(int a, int b) {
    return b - a;
    }

int strange_order(int a, int b) {
    if(a == 0 || b == 0) {
        return 0;
    } else {
        return a % b; // modulus operator returns remainder of a/b
    }
}

/* Used to test correct sorting by bubble_sort
* doing the sort and printing
*cmp completely replaces compare_cb at '*sorted' declaration
*note sorted is freed at end, targets not freed in bubble_sort def
*/
void test_sorting(int *numbers, int count, compare_cb cmp)
{
    int i = 0;
    int *sorted = bubble_sort(numbers, count, cmp);

    if(!sorted) die("Failed to sort as requested.");

    for(i = 0; i < count; i++) {
        printf("%d ", sorted[i]);
    }
    printf("\n");
    
    unsigned char *data = (unsigned char *)cmp;
    for(i = 0; i < 25; i++) {
        printf("%02x:", data[i]);
    }
    printf("\n");
    free(sorted);
}
/*main sets array of int from input @ cmdline
*inputs takes array cmdline char, conv to int w/ atoi goes to new array 
*'numbers'
*test_sorting operates on this arrar of inputs
*/
int main(int argc, char *argv[])
{
    if(argc < 2) die("USAGE: ex18 4 3 1 5 6");

    int count = argc - 1;
    int i = 0;
    char **inputs = argv + 1;

    int *numbers = malloc(count * sizeof(int));
    if (!numbers) die("Memory error.");

    for(i = 0; i < count; i++) {
        numbers[i] = atoi(inputs[i]);
    }
    printf("\n");
    printf("Your list has been sorted:\n");
    test_sorting(numbers, count, sorted_order);
    test_sorting(numbers, count, reverse_order);
    test_sorting(numbers, count, strange_order);

    free(numbers);//note data free() from test_sorting def as well as this free()

    return 0;
}
